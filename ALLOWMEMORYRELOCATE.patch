diff --git a/tools/firmware/hvmloader/pci.c b/tools/firmware/hvmloader/pci.c
index 257a6feb..da3d1c65 100644
--- a/tools/firmware/hvmloader/pci.c
+++ b/tools/firmware/hvmloader/pci.c
@@ -350,6 +350,13 @@ void pci_setup(void)
          *   big enough, or until it's 2GiB, or until it overlaps guest
          *   memory
          */
+        printf("NEOWUTRAN pci.c: mmio_total: 0x%llx\n", mmio_total);
+        printf("NEOWUTRAN pci.c: pci_mem_start: 0x%x\n",pci_mem_start);
+        printf("NEOWUTRAN pci.c: pci_mem_end: 0x%x\n",pci_mem_end);
+        printf("NEOWUTRAN pci.c: hvm_info->low_mem_pgend: 0x%x\n",hvm_info->low_mem_pgend);
+        printf("NEOWUTRAN pci.c: allow_memory_relocate: %d\n",allow_memory_relocate);
+
+
         while ( (mmio_total > (pci_mem_end - pci_mem_start))
                 && ((pci_mem_start << 1) != 0)
                 && (allow_memory_relocate
@@ -357,6 +364,15 @@ void pci_setup(void)
                         >= hvm_info->low_mem_pgend)) )
             pci_mem_start <<= 1;
 
+         if ( (mmio_total > (pci_mem_end - pci_mem_start))
+                && ((pci_mem_start << 1) != 0)
+                && (1
+                    || (((pci_mem_start << 1) >> PAGE_SHIFT)
+                        >= hvm_info->low_mem_pgend)) ){
+	       printf("NEOWUTRAN pci.c: HVM_LOADER would have tried to relocate guest memory\n");
+               printf("NEOWUTRAN pci.c: 2: pci_mem_start: 0x%x\n",pci_mem_start);
+        }
+
         /*
          * Try to accommodate RMRRs in our MMIO region on a best-effort basis.
          * If we have RMRRs in the range, then make pci_mem_start just after
@@ -365,6 +381,9 @@ void pci_setup(void)
         if ( pci_mem_start > (hvm_info->low_mem_pgend << PAGE_SHIFT) &&
              check_overlap_all(pci_mem_start, pci_mem_end-pci_mem_start) )
             pci_mem_start = hvm_info->low_mem_pgend << PAGE_SHIFT;
+
+         printf("NEOWUTRAN pci.c: 3: pci_mem_start: 0x%x\n",pci_mem_start);
+
     }
 
     if ( mmio_total > (pci_mem_end - pci_mem_start) )
