

diff --git a/tools/firmware/hvmloader/pci.c b/tools/firmware/hvmloader/pci.c
index 257a6feb..030b500c 100644
--- a/tools/firmware/hvmloader/pci.c
+++ b/tools/firmware/hvmloader/pci.c
@@ -118,7 +118,7 @@ void pci_setup(void)
      * Since xend can only use qemu-traditional, I think this is the
      * option that will have the least impact.
      */
-    bool allow_memory_relocate = 1;
+    bool allow_memory_relocate = 0;
 
     BUILD_BUG_ON((typeof(*pci_devfn_decode_type))PCI_COMMAND_IO !=
                  PCI_COMMAND_IO);
@@ -127,12 +127,13 @@ void pci_setup(void)
     BUILD_BUG_ON((typeof(*pci_devfn_decode_type))PCI_COMMAND_MASTER !=
                  PCI_COMMAND_MASTER);
 
+    /*
     s = xenstore_read(HVM_XS_ALLOW_MEMORY_RELOCATE, NULL);
     if ( s )
         allow_memory_relocate = strtoll(s, NULL, 0);
     printf("Relocating guest memory for lowmem MMIO space %s\n",
            allow_memory_relocate?"enabled":"disabled");
-
+*/
     s = xenstore_read("platform/mmio_hole_size", NULL);
     if ( s )
         mmio_hole_size = strtoll(s, NULL, 0);
diff --git a/xen/arch/x86/Kconfig b/xen/arch/x86/Kconfig
index 92cf0b85..2a15a81b 100644
--- a/xen/arch/x86/Kconfig
+++ b/xen/arch/x86/Kconfig
@@ -271,8 +271,6 @@ config X2APIC_MIXED
 
 endchoice
 
-         If unsure, say N.
-
 config GUEST
        bool
 
diff --git a/xen/arch/x86/genapic/x2apic.c b/xen/arch/x86/genapic/x2apic.c
index 44d39d21..6dc3dc6e 100644
--- a/xen/arch/x86/genapic/x2apic.c
+++ b/xen/arch/x86/genapic/x2apic.c
@@ -287,29 +287,44 @@ custom_param("x2apic-mode", parse_x2apic_mode);
 const struct genapic *__init apic_x2apic_probe(void)
 {
     /* Honour the legacy cmdline setting if it's the only one provided. */
-    if ( x2apic_mode == unset && x2apic_phys >= 0 )
+    printk("NEOWUTRAN: X2APIC_MODE: %d \n", x2apic_mode);
+    printk("NEOWUTRAN: X2APIC_PHYS: %d \n", x2apic_phys);
+    printk("NEOWUTRAN: acpi_gbl_FADT.flags: %d \n", acpi_gbl_FADT.flags);
+    printk("NEOWUTRAN IOMMU_INTREMAP: %s \n", iommu_intremap == iommu_intremap_off ? "same" : "different");
+
+    if ( x2apic_mode == unset && x2apic_phys >= 0 ){
+        printk("Neowutran: PASSE 1 \n");
         x2apic_mode = x2apic_phys ? physical : cluster;
+    }
 
     if ( x2apic_mode == unset )
     {
+        printk("Neowutran: PASSE 2 \n");
         if ( acpi_gbl_FADT.flags & ACPI_FADT_APIC_PHYSICAL )
         {
 
[user@archlinux xen-4.17.2]$ git diff > /tmp/tata
[user@archlinux xen-4.17.2]$ cat /tmp/tata 
diff --git a/tools/firmware/hvmloader/pci.c b/tools/firmware/hvmloader/pci.c
index 257a6feb..030b500c 100644
--- a/tools/firmware/hvmloader/pci.c
+++ b/tools/firmware/hvmloader/pci.c
@@ -118,7 +118,7 @@ void pci_setup(void)
      * Since xend can only use qemu-traditional, I think this is the
      * option that will have the least impact.
      */
-    bool allow_memory_relocate = 1;
+    bool allow_memory_relocate = 0;
 
     BUILD_BUG_ON((typeof(*pci_devfn_decode_type))PCI_COMMAND_IO !=
                  PCI_COMMAND_IO);
@@ -127,12 +127,13 @@ void pci_setup(void)
     BUILD_BUG_ON((typeof(*pci_devfn_decode_type))PCI_COMMAND_MASTER !=
                  PCI_COMMAND_MASTER);
 
+    /*
     s = xenstore_read(HVM_XS_ALLOW_MEMORY_RELOCATE, NULL);
     if ( s )
         allow_memory_relocate = strtoll(s, NULL, 0);
     printf("Relocating guest memory for lowmem MMIO space %s\n",
            allow_memory_relocate?"enabled":"disabled");
-
+*/
     s = xenstore_read("platform/mmio_hole_size", NULL);
     if ( s )
         mmio_hole_size = strtoll(s, NULL, 0);
diff --git a/xen/arch/x86/Kconfig b/xen/arch/x86/Kconfig
index 92cf0b85..2a15a81b 100644
--- a/xen/arch/x86/Kconfig
+++ b/xen/arch/x86/Kconfig
@@ -271,8 +271,6 @@ config X2APIC_MIXED
 
 endchoice
 
-	  If unsure, say N.
-
 config GUEST
 	bool
 
diff --git a/xen/arch/x86/genapic/x2apic.c b/xen/arch/x86/genapic/x2apic.c
index 44d39d21..6dc3dc6e 100644
--- a/xen/arch/x86/genapic/x2apic.c
+++ b/xen/arch/x86/genapic/x2apic.c
@@ -287,29 +287,44 @@ custom_param("x2apic-mode", parse_x2apic_mode);
 const struct genapic *__init apic_x2apic_probe(void)
 {
     /* Honour the legacy cmdline setting if it's the only one provided. */
-    if ( x2apic_mode == unset && x2apic_phys >= 0 )
+    printk("NEOWUTRAN: X2APIC_MODE: %d \n", x2apic_mode);
+    printk("NEOWUTRAN: X2APIC_PHYS: %d \n", x2apic_phys);
+    printk("NEOWUTRAN: acpi_gbl_FADT.flags: %d \n", acpi_gbl_FADT.flags);
+    printk("NEOWUTRAN IOMMU_INTREMAP: %s \n", iommu_intremap == iommu_intremap_off ? "same" : "different");
+
+    if ( x2apic_mode == unset && x2apic_phys >= 0 ){
+        printk("Neowutran: PASSE 1 \n");
         x2apic_mode = x2apic_phys ? physical : cluster;
+    }
 
     if ( x2apic_mode == unset )
     {
+        printk("Neowutran: PASSE 2 \n");
         if ( acpi_gbl_FADT.flags & ACPI_FADT_APIC_PHYSICAL )
         {
 
+            printk("Neowutran: PASSE 3 \n");
             printk(XENLOG_INFO "ACPI FADT forcing x2APIC physical mode\n");
             x2apic_mode = physical;
          }
-        else
+        else{
+            printk("Neowutran: PASSE 4 \n");
             x2apic_mode = IS_ENABLED(CONFIG_X2APIC_MIXED) ? mixed
                           : (IS_ENABLED(CONFIG_X2APIC_PHYSICAL) ? physical
                                                                 : cluster);
+           printk("NEOWUTRAN: X2APIC_MODE: %d \n", x2apic_mode);
+        }
     }
 
 
-    if ( x2apic_mode == physical )
+    if ( x2apic_mode == physical ){
+        printk("Neowutran: PASSE 5 \n");
         return &apic_x2apic_phys;
+    }
 
     if ( x2apic_mode == cluster && iommu_intremap != iommu_intremap_full )
     {
+        printk("Neowutran: PASSE 6 \n");
         printk("WARNING: x2APIC cluster mode is not supported %s interrupt remapping -"
                " forcing mixed mode\n",
                iommu_intremap == iommu_intremap_off ? "without"
@@ -319,6 +334,7 @@ const struct genapic *__init apic_x2apic_probe(void)
 
     if ( !this_cpu(cluster_cpus) )
     {
+        printk("Neowutran: PASSE 7 \n");
         update_clusterinfo(NULL, CPU_UP_PREPARE,
                            (void *)(long)smp_processor_id());
         init_apic_ldr_x2apic_cluster();
--
2.4
